=== tests/cases/compiler/jsxInferenceProducesLiteralAsExpected.tsx ===
import React = require("react");
>React : typeof React

type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];
>FunctionPropertyNames : { [K in keyof T]: T[K] extends Function ? K : never; }[keyof T]
>T : T
>K : K
>T : T
>T : T
>K : K
>Function : Function
>K : K
>T : T

class TestObject {
>TestObject : TestObject

    a: string = '';
>a : string
>'' : ""

    b: number = 1;
>b : number
>1 : 1

    c: () => void = () => { };
>c : () => void
>() => { } : () => void
}
interface TestProps<T> {
>TestProps : TestProps<T>
>T : T

    model: T;
>model : T
>T : T

    foo: FunctionPropertyNames<T>;
>foo : { [K in keyof T]: T[K] extends Function ? K : never; }[keyof T]
>FunctionPropertyNames : { [K in keyof T]: T[K] extends Function ? K : never; }[keyof T]
>T : T
}
function Test<T>(props: TestProps<T>) { return <></>; }
>Test : <T>(props: TestProps<T>) => JSX.Element
>T : T
>props : TestProps<T>
>TestProps : TestProps<T>
>T : T
><></> : JSX.Element

const model = new TestObject();
>model : TestObject
>new TestObject() : TestObject
>TestObject : typeof TestObject

const el1 = <Test model={model} foo="c" />;
>el1 : JSX.Element
><Test model={model} foo="c" /> : JSX.Element
>Test : <T>(props: TestProps<T>) => JSX.Element
>model : TestObject
>model : TestObject
>foo : "c"

const el2 = <Test<TestObject> model={model} foo="c" />;
>el2 : JSX.Element
><Test<TestObject> model={model} foo="c" /> : JSX.Element
>Test : <T>(props: TestProps<T>) => JSX.Element
>TestObject : TestObject
>model : TestObject
>model : TestObject
>foo : "c"

