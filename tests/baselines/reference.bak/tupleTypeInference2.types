=== tests/cases/compiler/tupleTypeInference2.ts ===
// Repro from #22564

type A<R> = [R] | [R, string];
>A : A<R>
>R : R
>R : R
>R : R

declare function f<T>(x: A<T>): T;
>f : <T>(x: A<T>) => T
>T : T
>x : A<T>
>A : A<R>
>T : T
>T : T

f([undefined, ''] as [never, string]); // T: never
>f([undefined, ''] as [never, string]) : never
>f : <T>(x: A<T>) => T
>[undefined, ''] as [never, string] : [never, string]
>[undefined, ''] : [undefined, string]
>undefined : undefined
>'' : ""

f([undefined, ''] as [void, string]); // T: void
>f([undefined, ''] as [void, string]) : void
>f : <T>(x: A<T>) => T
>[undefined, ''] as [void, string] : [void, string]
>[undefined, ''] : [undefined, string]
>undefined : undefined
>'' : ""

// Repro from #22563

type B<R, S> = [R] | [R, S];
>B : B<R, S>
>R : R
>S : S
>R : R
>R : R
>S : S

declare function g<T, U>(f: B<T, U>): U;
>g : <T, U>(f: B<T, U>) => U
>T : T
>U : U
>f : B<T, U>
>B : B<R, S>
>T : T
>U : U
>U : U

g([[]] as [void[]]); // U: {}
>g([[]] as [void[]]) : {}
>g : <T, U>(f: B<T, U>) => U
>[[]] as [void[]] : [void[]]
>[[]] : [never[]]
>[] : never[]

type C<R, S> = [R[]] | [R[], S];
>C : C<R, S>
>R : R
>S : S
>R : R
>R : R
>S : S

declare function h<T, U>(f: C<T, U>): U;
>h : <T, U>(f: C<T, U>) => U
>T : T
>U : U
>f : C<T, U>
>C : C<R, S>
>T : T
>U : U
>U : U

h([[]] as [void[]]); // U: {}
>h([[]] as [void[]]) : {}
>h : <T, U>(f: C<T, U>) => U
>[[]] as [void[]] : [void[]]
>[[]] : [never[]]
>[] : never[]

// Repro from #22562

type C2<R> = [R[]] | [R[], void];
>C2 : C2<R>
>R : R
>R : R
>R : R

declare function h2<T>(f: C2<T>): T;
>h2 : <T>(f: C2<T>) => T
>T : T
>f : C2<T>
>C2 : C2<R>
>T : T
>T : T

h2([[]] as [never[]]); // T: never
>h2([[]] as [never[]]) : never
>h2 : <T>(f: C2<T>) => T
>[[]] as [never[]] : [never[]]
>[[]] : [never[]]
>[] : never[]

h2([[]] as [void[]]); // T: void
>h2([[]] as [void[]]) : void
>h2 : <T>(f: C2<T>) => T
>[[]] as [void[]] : [void[]]
>[[]] : [never[]]
>[] : never[]

