=== tests/cases/conformance/salsa/use.js ===
/// <reference path='./types.d.ts'/>
var mini = require('./minimatch')
>mini : { (): void; M: typeof M; filter: () => void; }
>require('./minimatch') : { (): void; M: typeof M; filter: () => void; }
>require : any
>'./minimatch' : "./minimatch"

mini.M.defaults()
>mini.M.defaults() : any
>mini.M.defaults : (def: any) => any
>mini.M : typeof M
>mini : { (): void; M: typeof M; filter: () => void; }
>M : typeof M
>defaults : (def: any) => any

var m = new mini.M()
>m : M
>new mini.M() : M
>mini.M : typeof M
>mini : { (): void; M: typeof M; filter: () => void; }
>M : typeof M

m.m()
>m.m() : void
>m.m : () => void
>m : M
>m : () => void

mini.filter()
>mini.filter() : void
>mini.filter : () => void
>mini : { (): void; M: typeof M; filter: () => void; }
>filter : () => void

=== tests/cases/conformance/salsa/types.d.ts ===
declare var require: any;
>require : any

declare var module: any;
>module : any

=== tests/cases/conformance/salsa/minimatch.js ===
/// <reference path='./types.d.ts'/>
module.exports = minimatch
>module.exports = minimatch : { (): void; M: typeof M; filter: () => void; }
>module.exports : any
>module : any
>exports : any
>minimatch : { (): void; M: typeof M; filter: () => void; }

minimatch.M = M
>minimatch.M = M : typeof M
>minimatch.M : typeof M
>minimatch : { (): void; M: typeof M; filter: () => void; }
>M : typeof M
>M : typeof M

minimatch.filter = filter
>minimatch.filter = filter : () => void
>minimatch.filter : () => void
>minimatch : { (): void; M: typeof M; filter: () => void; }
>filter : () => void
>filter : () => void

function filter() {
>filter : () => void

    return minimatch()
>minimatch() : void
>minimatch : { (): void; M: typeof M; filter: () => void; }
}
function minimatch() {
>minimatch : { (): void; M: typeof M; filter: () => void; }
}
M.defaults = function (def) {
>M.defaults = function (def) {    return def} : (def: any) => any
>M.defaults : (def: any) => any
>M : typeof M
>defaults : (def: any) => any
>function (def) {    return def} : (def: any) => any
>def : any

    return def
>def : any
}
M.prototype.m = function () {
>M.prototype.m = function () {} : () => void
>M.prototype.m : any
>M.prototype : any
>M : typeof M
>prototype : any
>m : any
>function () {} : () => void
}
function M() {
>M : typeof M
}

