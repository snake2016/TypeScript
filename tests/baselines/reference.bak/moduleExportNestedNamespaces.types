=== tests/cases/conformance/salsa/mod.js ===
module.exports.n = {};
>module.exports.n = {} : any
>module.exports.n : any
>module.exports : any
>module : any
>exports : any
>n : any
>{} : { [x: string]: any; }

module.exports.n.K = function C() {
>module.exports.n.K = function C() {    this.x = 10;} : typeof C
>module.exports.n.K : any
>module.exports.n : any
>module.exports : any
>module : any
>exports : any
>n : any
>K : any
>function C() {    this.x = 10;} : typeof C
>C : typeof C

    this.x = 10;
>this.x = 10 : 10
>this.x : any
>this : any
>x : any
>10 : 10
}
module.exports.Classic = class {
>module.exports.Classic = class {    constructor() {        this.p = 1    }} : typeof Classic
>module.exports.Classic : any
>module.exports : any
>module : any
>exports : any
>Classic : any
>class {    constructor() {        this.p = 1    }} : typeof Classic

    constructor() {
        this.p = 1
>this.p = 1 : 1
>this.p : number
>this : this
>p : number
>1 : 1
    }
}

=== tests/cases/conformance/salsa/use.js ===
import * as s from './mod'
>s : typeof s

var k = new s.n.K()
>k : C
>new s.n.K() : C
>s.n.K : typeof C
>s.n : typeof s.n
>s : typeof s
>n : typeof s.n
>K : typeof C

k.x
>k.x : number
>k : C
>x : number

var classic = new s.Classic()
>classic : Classic
>new s.Classic() : Classic
>s.Classic : typeof Classic
>s : typeof s
>Classic : typeof Classic


/** @param {s.n.K} c
    @param {s.Classic} classic */
function f(c, classic) {
>f : (c: C, classic: Classic) => void
>c : C
>classic : Classic

    c.x
>c.x : number
>c : C
>x : number

    classic.p
>classic.p : number
>classic : Classic
>p : number
}

