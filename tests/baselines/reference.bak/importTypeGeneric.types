=== tests/cases/conformance/types/import/a.d.ts ===
export interface Foo {
>Foo : Foo

    a: string;
>a : string
}
=== tests/cases/conformance/types/import/b.d.ts ===
export interface Foo {
>Foo : Foo

    a: number;
>a : number
}
=== tests/cases/conformance/types/import/usage.ts ===
export function getFooFrom<T extends "./a" | "./b">(v: T): import(T).Foo {
>getFooFrom : <T extends "./a" | "./b">(v: T) => any
>T : T
>v : T
>T : T
>T : T
>Foo : No type information available!

    return undefined as any;
>undefined as any : any
>undefined : undefined
}

export function getFooValueFrom<T extends "./a" | "./b">(v: T): import(T).Foo["a"] {
>getFooValueFrom : <T extends "./a" | "./b">(v: T) => any
>T : T
>v : T
>T : T
>T : T
>Foo : No type information available!

    return undefined as any;
>undefined as any : any
>undefined : undefined
}

