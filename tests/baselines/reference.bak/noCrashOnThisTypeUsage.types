=== tests/cases/compiler/noCrashOnThisTypeUsage.ts ===
interface IListenable {
>IListenable : IListenable

    changeListeners: Function[] | null
>changeListeners : Function[] | null
>Function : Function
>null : null

    observe(handler: (change: any, oldValue?: any) => void, fireImmediately?: boolean): void
>observe : (handler: (change: any, oldValue?: any) => void, fireImmediately?: boolean | undefined) => void
>handler : (change: any, oldValue?: any) => void
>change : any
>oldValue : any
>fireImmediately : boolean | undefined
}

function notifyListeners<T>(listenable: IListenable, change: T) {
>notifyListeners : <T>(listenable: IListenable, change: T) => void
>T : T
>listenable : IListenable
>IListenable : IListenable
>change : T
>T : T
}

export class ObservableValue<T> {
>ObservableValue : ObservableValue<T>
>T : T

    constructor(
        public value: T
>value : T
>T : T

    ) {
        const newValue: T = value;
>newValue : T
>T : T
>value : T

        const oldValue: any = null;
>oldValue : any
>null : null

        notifyListeners(this, {
>notifyListeners(this, {            type: "update",            object: this,            newValue,            oldValue        }) : void
>notifyListeners : <T>(listenable: IListenable, change: T) => void
>this : this
>{            type: "update",            object: this,            newValue,            oldValue        } : { type: string; object: this; newValue: T; oldValue: any; }

            type: "update",
>type : string
>"update" : "update"

            object: this,
>object : this
>this : this

            newValue,
>newValue : T

            oldValue
>oldValue : any

        });
    }
    changeListeners: Function[] | null = [];
>changeListeners : Function[] | null
>Function : Function
>null : null
>[] : never[]

    observe(handler: (change: any, oldValue?: any) => void, fireImmediately?: boolean) {}
>observe : (handler: (change: any, oldValue?: any) => void, fireImmediately?: boolean | undefined) => void
>handler : (change: any, oldValue?: any) => void
>change : any
>oldValue : any
>fireImmediately : boolean | undefined
}
