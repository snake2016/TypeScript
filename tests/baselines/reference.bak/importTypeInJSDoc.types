=== tests/cases/conformance/types/import/externs.d.ts ===
declare namespace MyClass {
>MyClass : typeof MyClass

    export interface Bar {
>Bar : Bar

        doer: (x: string) => void;
>doer : (x: string) => void
>x : string
    }
}
declare class MyClass {
>MyClass : MyClass

    field: string;
>field : string

    static Bar: (x: string, y?: number) => void;
>Bar : (x: string, y?: number) => void
>x : string
>y : number

    constructor(x: MyClass.Bar);
>x : MyClass.Bar
>MyClass : any
>Bar : MyClass.Bar
}
declare global {
>global : typeof global

    const Foo: typeof MyClass;
>Foo : typeof MyClass
>MyClass : typeof MyClass
}
export = MyClass;
>MyClass : MyClass

=== tests/cases/conformance/types/import/index.js ===
/**
 * @typedef {import("./externs")} Foo
 */

let a = /** @type {Foo} */(/** @type {*} */(undefined)); 
>a : MyClass
>(/** @type {*} */(undefined)) : MyClass
>(undefined) : any
>undefined : undefined

a = new Foo({doer: Foo.Bar});
>a = new Foo({doer: Foo.Bar}) : MyClass
>a : MyClass
>new Foo({doer: Foo.Bar}) : MyClass
>Foo : typeof MyClass
>{doer: Foo.Bar} : { doer: (x: string, y?: number) => void; }
>doer : (x: string, y?: number) => void
>Foo.Bar : (x: string, y?: number) => void
>Foo : typeof MyClass
>Bar : (x: string, y?: number) => void

const q = /** @type {import("./externs").Bar} */({ doer: q => q });
>q : MyClass.Bar
>({ doer: q => q }) : MyClass.Bar
>{ doer: q => q } : { doer: (q: string) => string; }
>doer : (q: string) => string
>q => q : (q: string) => string
>q : string
>q : string

const r = /** @type {typeof import("./externs").Bar} */(r => r);
>r : (x: string, y?: number) => void
>(r => r) : (x: string, y?: number) => void
>r => r : (r: string) => string
>r : string
>r : string

